<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
	
<mapper namespace="boardMapper">
	<sql id="boardListSql">
		SELECT B.NO,
			   B.TITLE, 
			   M.ID,
			   B.CREATE_DATE,
			   B.ORIGINAL_FILENAME, 
			   B.READCOUNT, 
			   B.STATUS
        FROM BOARD B
        JOIN MEMBER M ON(B.WRITER_NO = M.NO)
	</sql>

	<resultMap id="boardListResultMap" type="Board">
		<id property="no" column="NO"/>
		<result property="title" column="TITLE"/>
		<result property="writerId" column="ID"/>
		<result property="originalFilename" column="ORIGINAL_FILENAME"/>
		<result property="readCount" column="READCOUNT"/>
		<result property="status" column="STATUS"/>
		<result property="createDate" column="CREATE_DATE"/>
	</resultMap>
	
	<!-- 
	
	1. 쿼리문을 각각 만들어서 하나의 ResultMap에서 매핑하는 방법
	
	extends 속성은 다른 resultMap을 상속하는 속성이다.
	
	collection 요소는 컬렉션에 해당하는 필드에 조회 결과를 매핑할 때 사용한다.
	  - javaType 속성은 컬렉션 필드의 자바 타입을 지정한다.
	  - select 속성은 조회하고자 하는 select 쿼리문의 id를 입력한다.
	  - column 속성은 조회하고자 하는 select 쿼리문에 파라미터를 전달할 때 사용한다. 
	  
	<resultMap id="boardDetailResultMap" type="Board"
		extends="boardListResultMap">
		
		<result property="content" column="CONTENT"/>
		<result property="renamedFilename" column="RENAMED_FILENAME"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<collection property="replies" javaType="arraylist" 
			select="selectRepliesByBoardNo" column="NO" />
	</resultMap>
	
	2. 하나의 쿼리문을 만들어서 ResultMap에서 매핑하는 방법
	-->
	<resultMap id="boardDetailResultMap" type="Board"
		extends="boardListResultMap">
		
		<result property="content" column="CONTENT"/>
		<result property="renamedFilename" column="RENAMED_FILENAME"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
		<collection property="replies" javaType="arraylist" 
			columnPrefix="R_" resultMap="replyResultMap"/>
	</resultMap>
	
	<resultMap id="replyResultMap" type="Reply">
		<id property="no" column="NO"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="content" column="CONTENT"/>
		<result property="writerId" column="ID"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
	</resultMap>
	
	
	<!-- 게시글 목록 조회(전체 목록) -->
	<select id="selectBoardCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD WHERE STATUS='Y'
	</select>
	
	<select id="selectAll" resultMap="boardListResultMap">
		<include refid="boardListSql" />
		WHERE B.STATUS = 'Y'
        ORDER BY B.NO DESC
	</select>
	
	<!-- 게시글 목록 조회(검색 기능 적용) -->
	<select id="selectBoardCountByKeyword" 
		parameterType="map" resultType="_int">
		
		SELECT COUNT(*)
        FROM BOARD B
        JOIN MEMBER M ON(B.WRITER_NO = M.NO)
        WHERE B.STATUS = 'Y'
		<if test="type != null">
			<choose>
				<when test="type.equals('writer')">
					AND M.ID LIKE '%' || #{keyword} || '%'
				</when>
				<when test="type.equals('title')">
					AND B.TITLE LIKE '%' || #{keyword} || '%'
				</when>
				<when test="type.equals('content')">
					AND B.CONTENT LIKE '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
	</select>
	
	<select id="selectBoardListByKeyword" 
		resultMap="boardListResultMap" parameterType="map">
		
		<!--  
		1. 다중 <if>를 활용한 검색 기능 구현
		<include refid="boardListSql" />
		WHERE B.STATUS = 'Y'
        <if test="type != null">
        	<if test="type.equals('writer')">
        		AND M.ID LIKE '%' || #{keyword} || '%'
        	</if>
        	<if test="type.equals('title')">
        		AND B.TITLE LIKE '%' || #{keyword} || '%'
        	</if>
        	<if test="type.equals('content')">
        		AND B.CONTENT LIKE '%' || #{keyword} || '%'
        	</if>
        </if>
		-->
		
		<!-- 
		2. <choose>를 활용한 검색 기능 구현
		<include refid="boardListSql" />
		WHERE B.STATUS = 'Y'
		<if test="type != null">
			<choose>
				<when test="type.equals('writer')">
					AND M.ID LIKE '%' || #{keyword} || '%'
				</when>
				<when test="type.equals('title')">
					AND B.TITLE LIKE '%' || #{keyword} || '%'
				</when>
				<when test="type.equals('content')">
					AND B.CONTENT LIKE '%' || #{keyword} || '%'
				</when>
				<otherwise>
					위의 조건 중 하나라도 만족하지 않는 경우 포함될 쿼리문 작성
				</otherwise>
			</choose>
		</if>
        ORDER BY B.NO DESC
		-->
		
		<!-- 3. <where>를 활용한 검색 기능 구현 
		<include refid="boardListSql"/>
		<where>
			<if test="type != null">
				<choose>
					<when test="type.equals('writer')">
						M.ID LIKE '%' || #{keyword} || '%'
					</when>
					<when test="type.equals('title')">
						AND B.TITLE LIKE '%' || #{keyword} || '%'
					</when>
					<when test="type.equals('content')">
						AND B.CONTENT LIKE '%' || #{keyword} || '%'
					</when>
				</choose>
			</if>
			AND B.STATUS = 'Y'
		</where>
        ORDER BY B.NO DESC
		-->
		
		<!-- 
		4. <trim>를 활용한 검색 기능 구현 
		-->
		<include refid="boardListSql"/>
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="type != null">
				<choose>
					<when test="type.equals('writer')">
						M.ID LIKE '%' || #{keyword} || '%'
					</when>
					<when test="type.equals('title')">
						AND B.TITLE LIKE '%' || #{keyword} || '%'
					</when>
					<when test="type.equals('content')">
						AND B.CONTENT LIKE '%' || #{keyword} || '%'
					</when>
				</choose>
			</if>
			AND B.STATUS = 'Y'
		</trim>
        ORDER BY B.NO DESC
	</select>
	
	<!-- 게시글 목록 조회 (필터 기능 적용) -->
	<select id="selectBoardCountByFilters"
		parameterType="map" resultType="_int">
		
		SELECT COUNT(*)
        FROM BOARD B
        JOIN MEMBER M ON(B.WRITER_NO = M.NO)
        WHERE B.STATUS = 'Y'
        <if test="filters != null">
			AND TYPE IN
			<foreach item="filter" collection="filters"
				open="(" separator="," close=")">
				#{filter}
			</foreach>
		</if>
	</select>
	
	<select id="selectBoardListByFilters"
		resultMap="boardListResultMap" parameterType="map">
		
		<include refid="boardListSql" />
		WHERE B.STATUS = 'Y'
		<!--  
		<if test="array != null">
		-->
		<if test="filters != null">
			<!-- AND TYPE IN ('B2', 'B3') -->
			AND TYPE IN
			<!--  
			<foreach item="filter" collection="array"
			-->
			<foreach item="filter" collection="filters"
				open="(" separator="," close=")">
				#{filter}
			</foreach>
		</if>
		ORDER BY B.NO DESC
	</select>
	
	<!-- 게시글 상세 조회 (댓글 포함) -->
	<!-- 
	1. 쿼리문을 각각 만들어서 ResultMap에서 매핑하는 방법 
	<select id="selectBoardByNo" parameterType="_int"
		resultMap="boardDetailResultMap">
		SELECT  B.NO, 
			 	B.TITLE, 
			 	M.ID, 
			 	B.READCOUNT, 
			 	B.ORIGINAL_FILENAME, 
			 	B.RENAMED_FILENAME, 
			 	B.CONTENT, 
			 	B.CREATE_DATE, 
			 	B.MODIFY_DATE
		FROM BOARD B
		JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		WHERE B.STATUS = 'Y' AND B.NO = #{no}	
	</select>
	
	<select id="selectRepliesByBoardNo" parameterType="_int"
		resultMap="replyResultMap">
		SELECT R.NO, 
		       R.BOARD_NO, 
		       R.CONTENT, 
		       M.ID, 
		       R.CREATE_DATE, 
		       R.MODIFY_DATE
		FROM REPLY R
		JOIN MEMBER M ON(R.WRITER_NO = M.NO)
		WHERE R.STATUS = 'Y' AND BOARD_NO = #{boardNo}
		ORDER BY R.NO DESC
	</select>
	
	2. 하나의 쿼리문을 만들어서 ResultMap에서 매핑하는 방법
	-->
	<select id="selectBoardByNo" parameterType="_int"
		resultMap="boardDetailResultMap">

		SELECT B.NO,
		       B.TITLE, 
		       M.ID, 
		       B.READCOUNT,
		       B.ORIGINAL_FILENAME,
		       B.RENAMED_FILENAME,
		       B.CONTENT,
		       B.TYPE,
		       B.CREATE_DATE,
		       B.MODIFY_DATE,
		       R.NO AS "R_NO",
		       R.BOARD_NO AS "R_BOARD_NO",
		       R.CONTENT AS "R_CONTENT",
		       M2.ID AS "R_ID",
		       R.CREATE_DATE AS "R_CREATE_DATE",
		       R.MODIFY_DATE AS "R_MODIFY_DATE"
		FROM BOARD B
		INNER JOIN MEMBER M ON(B.WRITER_NO = M.NO)
		LEFT OUTER JOIN REPLY R ON(B.NO = R.BOARD_NO)
		LEFT OUTER JOIN MEMBER M2 ON(R.WRITER_NO = M2.NO)
		WHERE B.STATUS = 'Y' AND B.NO = #{no}
	</select>
	
	<!-- 게시글 등록 -->
	<insert id="insertBoard" parameterType="Board"
		useGeneratedKeys="true" keyProperty="no" keyColumn="NO">
		INSERT INTO BOARD (
			NO,
			WRITER_NO,
			TITLE,
			CONTENT,
			ORIGINAL_FILENAME,
			RENAMED_FILENAME
		) VALUES (
			SEQ_BOARD_NO.NEXTVAL,
			#{writerNo},
			#{title},
			#{content},
			#{originalFilename},
			#{renamedFilename}
		)	
	</insert>

	<!-- 게시글 수정 -->
	<update id="updateBoard" parameterType="Board">
		<!--  
		1. 기존 JDBC에서 사용하던 update 쿼리
		UPDATE BOARD 
		SET 
			TITLE = #{title},
			CONTENT = #{content},
			ORIGINAL_FILENAME = #{originalFilename},
			RENAMED_FILENAME = #{renamedFilename},
			MODIFY_DATE=SYSDATE 
		WHERE NO = #{no}
		
		2. <set>을 활용한 update 쿼리
		UPDATE BOARD 
		<set>
			<if test="title != null">
				TITLE = #{title},
			</if>
			<if test="content != null">
				CONTENT = #{content},
			</if>
			<if test="originalFilename != null">
				ORIGINAL_FILENAME = #{originalFilename},
			</if>
			<if test="renamedFilename != null">
				RENAMED_FILENAME = #{renamedFilename},
			</if>
			MODIFY_DATE=SYSDATE
		</set>
		WHERE NO = #{no}
		
		3. <trim>을 활용한 update 쿼리
		-->
		UPDATE BOARD 
		<trim prefix="SET" suffixOverrides=",">
			<if test="title != null">
				TITLE = #{title},
			</if>
			<if test="content != null">
				CONTENT = #{content},
			</if>
			<if test="originalFilename != null">
				ORIGINAL_FILENAME = #{originalFilename},
			</if>
			<if test="renamedFilename != null">
				RENAMED_FILENAME = #{renamedFilename},
			</if>
			MODIFY_DATE=SYSDATE
		</trim>
		WHERE NO = #{no}
	</update>

	<!-- 게시글 삭제 -->
	<update id="updateStatus" parameterType="map">
		UPDATE BOARD
		SET
			STATUS = #{status}
		WHERE NO = #{no}
	</update>
</mapper>